//=============================================================================
//
// ダイアモンド [item_diamond.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "mode_game.h"
#include "renderer.h"
#include "item_diamond.h"
#include "player.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define SCRIPT_PASS ("Data/Script/DiamondData.txt")				//スクリプトパス
#define INITIAL_POSITION (D3DXVECTOR3(0.0f,0.0f,0.0f))			//位置の初期値
#define INITIAL_SIZE (D3DXVECTOR3(0.0f,0.0f,0.0f))				//サイズの初期値
#define INITIAL_COLLISIION_SIZE (D3DXVECTOR3(0.0f,0.0f,0.0f))	//衝突判定用サイズの初期値
#define INITIAL_ROTATION (D3DXVECTOR3(0.0f,0.0f,0.0f))			//回転の初期値
#define INITIAL_MOVE (D3DXVECTOR3(0.0f,0.0f,0.0f))				//移動量の初期値
#define ADD_DIAMOND (1)											//ダイアモンドの加算量

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CDiamond::CDiamond()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CDiamond::~CDiamond()
{
}

//=============================================================================
// 生成処理関数呼び出し
//=============================================================================
CDiamond * CDiamond::Create(D3DXVECTOR3 Position)
{
	//ダイアモンドのポインタ
	CDiamond * pDiamond = NULL;
	//ダイアモンドのポインタがNULLの場合
	if (pDiamond == NULL)
	{
		//ダイアモンドのメモリ確保
		pDiamond = new CDiamond;
		//ダイアモンドのポインタがNULLではない場合
		if (pDiamond != NULL)
		{
			//ダイアモンドの初期化処理関数呼び出し
			pDiamond->Init();
		}
	}
	//ダイアモンドのポインタを返す
	return pDiamond;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CDiamond::Init(void)
{
	//スクリプトパスの設定
	SetScriptPass(SCRIPT_PASS);
	//アイテムの初期化処理関数呼び出し
	CItem::Init();
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CDiamond::Uninit(void)
{
	//アイテムの終了処理関数呼び出し
	CItem::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CDiamond::Update(void)
{
	//アイテムの更新処理関数呼び出し
	CItem::Update();
	//衝突処理関数呼び出し
	Collision();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CDiamond::Draw(void)
{
	//アイテムの描画処理関数呼び出し
	CItem::Update();
}

//=============================================================================
// アイテムの効果処理関数
//=============================================================================
void CDiamond::Collision(void)
{
	//もし衝突したら
	if (bCollision(D3DXVECTOR3(0.0f,0.0f,0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f)) == true)
	{
		//アイテムの効果処理関数呼び出し
		Give();
	}
}

//=============================================================================
// アイテムの効果処理関数
//=============================================================================
void CDiamond::Give(void)
{
	//プレイヤーの取得
	CPlayer * pPlayer = CGameMode::GetPlayer();
	//もしプレイヤーのポインタがNULLじゃない場合
	if (pPlayer != NULL)
	{
		pPlayer->AddDiamond(ADD_DIAMOND);
	}
	//終了処理関数
	Uninit();
	return;
}
