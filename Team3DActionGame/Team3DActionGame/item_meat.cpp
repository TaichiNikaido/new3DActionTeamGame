//=============================================================================
//
// 肉 [item_meat.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "mode_game.h"
#include "renderer.h"
#include "item_meat.h"
#include "enemy.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define SCRIPT_PASS ("Data/Script/MeatData.txt")				//スクリプトパス
#define INITIAL_POSITION (D3DXVECTOR3(0.0f,0.0f,0.0f))			//位置の初期値
#define INITIAL_SIZE (D3DXVECTOR3(0.0f,0.0f,0.0f))				//サイズの初期値
#define INITIAL_COLLISIION_SIZE (D3DXVECTOR3(0.0f,0.0f,0.0f))	//衝突判定用サイズの初期値
#define INITIAL_ROTATION (D3DXVECTOR3(0.0f,0.0f,0.0f))			//回転の初期値
#define INITIAL_MOVE (D3DXVECTOR3(0.0f,0.0f,0.0f))				//移動量の初期値

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CMeat::CMeat()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CMeat::~CMeat()
{
}

//=============================================================================
// 生成処理関数呼び出し
//=============================================================================
CMeat * CMeat::Create(D3DXVECTOR3 Position)
{
	//肉のポインタ
	CMeat * pMeat = NULL;
	//肉のポインタがNULLの場合
	if (pMeat == NULL)
	{
		//肉のメモリ確保
		pMeat = new CMeat;
		//肉のポインタがNULLではない場合
		if (pMeat != NULL)
		{
			//肉の初期化処理関数呼び出し
			pMeat->Init();
		}
	}
	//肉のポインタを返す
	return pMeat;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CMeat::Init(void)
{
	//スクリプトパスの設定
	SetScriptPass(SCRIPT_PASS);
	//アイテムの初期化処理関数呼び出し
	CItem::Init();
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CMeat::Uninit(void)
{
	//アイテムの終了処理関数呼び出し
	CItem::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CMeat::Update(void)
{
	//アイテムの更新処理関数呼び出し
	CItem::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CMeat::Draw(void)
{
	//アイテムの描画処理関数呼び出し
	CItem::Update();
	//衝突処理関数呼び出し
	Collision();
}

//=============================================================================
// アイテムの効果処理関数
//=============================================================================
void CMeat::Collision(void)
{
	//もし衝突したら
	if (bCollision(D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f)) == true)
	{
		//アイテムの効果処理関数呼び出し
		Give();
	}
}

//=============================================================================
// アイテムの効果処理関数
//=============================================================================
void CMeat::Give(void)
{
	//敵の取得
	CEnemy * pEnemy = CGameMode::GetEnemy();
	//もし敵のポインタがNULLじゃない場合
	if (pEnemy != NULL)
	{
		//敵の食事処理関数呼び出し
		pEnemy->Eat();
	}
	Uninit();
	return;
}